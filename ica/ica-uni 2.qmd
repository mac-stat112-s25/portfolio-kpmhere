---
title: "Univariate Viz"
---

Use this file for practice with the **univariate viz** in-class activity.  Refer to the class website for details.

```{r}
hikes <- read.csv("https://mac-stat.github.io/data/high_peaks.csv")
```

```{r}
library(ggplot2)
```



**Exercise 1** 

**a**.  The caterory difficulty rating should have a feature which should show us what the difficulty is out of
**b**. For the elevation variable, we would need units eg ft/m/inch.

**Exercise 2**

```{r}
ggplot(hikes, aes(x = rating))
```


**Exercise 3** 

```{r}
ggplot(hikes, aes(x = rating))
```
The code generated the 3 categories. the first argument of the ggplot function is making reference to the data source (pull data from the source.), 
x = rating communicates what element or part of the data we want to work with/include in the graph, particularly on the x axis.
aes stands for aesthetics.

**Exercise 4**

```{r}
# adding geom bar() added bars in the sections of the difficulties proportional to their count on the dataset.
ggplot(hikes, aes(x = rating)) +
  geom_bar()
```
```{r}
# change in labels as well as styling, added styling element in the "labs" line.
ggplot(hikes, aes(x = rating)) +
  geom_bar() +
  labs(x = "Rating", y = "Number of hikes")
```

```{r}
# the color fill of the bar graphs change to blue, added styling element in the "geom_bar line"
ggplot(hikes, aes(x = rating)) +
  geom_bar(fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")
```
```{r}
# change in the edge color of the bar graphs, change in line with the geom bar
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue") +
  labs(x = "Rating", y = "Number of hikes")
```
  
```{r}
# "theme_minimal clears the canvas of the graph"
ggplot(hikes, aes(x = rating)) +
  geom_bar(color = "orange", fill = "blue")  +
  labs(x = "Rating", y = "Number of hikes") +
  theme_minimal()
```


```{r}
dim(hikes)
```




